window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "spaceteams.SC_Compute_Server", "modulename": "spaceteams.SC_Compute_Server", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.standalone_sim", "modulename": "spaceteams.SC_Compute_Server", "qualname": "standalone_sim", "kind": "function", "doc": "<p>standalone_sim(path: str) -> None</p>\n\n<p>Run a simulation that is self-contained within this Python process.\npath - Filepath of sim config.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.connect_to_sim", "modulename": "spaceteams.SC_Compute_Server", "qualname": "connect_to_sim", "kind": "function", "doc": "<p>connect_to_sim(sys_argv: list[str]) -> None</p>\n\n<p>Connect to a running simulation as a ServerAsLocalClient.\nsys_argv - insert python sys.argv here.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.leave_sim", "modulename": "spaceteams.SC_Compute_Server", "qualname": "leave_sim", "kind": "function", "doc": "<p>leave_sim() -> None</p>\n\n<p>Leave the sim without ending it for other users/programs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.stop_sim", "modulename": "spaceteams.SC_Compute_Server", "qualname": "stop_sim", "kind": "function", "doc": "<p>stop_sim() -> None</p>\n\n<p>Stop the sim, which ends it for all users/programs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.constant", "modulename": "spaceteams.SC_Compute_Server", "qualname": "constant", "kind": "function", "doc": "<p>constant(name: str) -> float</p>\n\n<p>Returns the value of constants based off of the string name of the constant. Uses SI base units, with the exception of kilograms.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_SimClock_Freeze", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_SimClock_Freeze", "kind": "function", "doc": "<p>SimGlobals_SimClock_Freeze() -> None</p>\n\n<p>Freezes the simulation clock. This function sets the sim timescale to 0, which halts the \n        courting of wall time towards sim time, effectively pausing the simulation</p>\n\n<pre><code>    Parameters:\n    __wallTimeToApply The wall time this clock modification should be submitted for, in \"sc_tai::time\" object. \n    The default value is the current wall time (sc_tai::now()) re-transimit A boolean flag indicating whether \n    or not to retransmit the new time setting. The default value is true.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_SimClock_UnFreeze", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_SimClock_UnFreeze", "kind": "function", "doc": "<p>SimGlobals_SimClock_UnFreeze() -> None</p>\n\n<p>Unfreezes the simulation clock, using the last non-zero timescale.</p>\n\n<pre><code>    Parameters:\n    _wallTimeToApply The wall time this clock modification should be submitted for, \n    in `sc_tai_time` object. The default value is the current wall time (`sc_tai::now()`). \n    retransmit A boolean flag indicating whether or not to retransmit the new time setting. \n    The default value is true.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_SimClock_SetTimescale", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_SimClock_SetTimescale", "kind": "function", "doc": "<p>SimGlobals_SimClock_SetTimescale(timescale: float) -> None</p>\n\n<p>Set simulation timescale. This is the ratio of time passage per wall time passage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_SimClock_GetTimescale", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_SimClock_GetTimescale", "kind": "function", "doc": "<p>SimGlobals_SimClock_GetTimescale() -> float</p>\n\n<p>Retrieves the current time scaling factor of the simulation dysfunction, \n                returns the current time scaling factor which determines how simulation time relates to real \n                (wall clock) time. A value of 1.0 would mean they are the same, A value greater than 1 would \n                mean the simulation time is faster than real time. A value of zero would mean time freezes \n                (but the simulation Functionality still runs). Negative values are allowed as well. </p>\n\n<pre><code>            Return: The current time scaling factor as a 'double'\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_SimClock_GetTimeNow", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_SimClock_GetTimeNow", "kind": "function", "doc": "<p>SimGlobals_SimClock_GetTimeNow() -> sc_timestamp_wrapper</p>\n\n<p>Retrieves the current simulation time dysfunction, returns the current time of the \n                simulation clock as an object of type 'sc_tai_time'</p>\n\n<pre><code>            Returns: The current time in 'sc_tai_time' format\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_SimClock_ResetTo", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_SimClock_ResetTo", "kind": "function", "doc": "<p>SimGlobals_SimClock_ResetTo(setClockTo: sc_timestamp_wrapper) -> None</p>\n\n<p>Resets clock to a specific time, and freeze simclock. This function resets the \n                simulation call to the given \u2018setClockTo\u2019 time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimState", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimState", "kind": "class", "doc": "<p>Members:</p>\n\n<p>Loading : Starting state of all network notes</p>\n\n<p>Lobby : After we finish the loading process and have opened\n              the proper network connections (probably sockets) to receive PlatformOrders. We wait around in \n              this state for someone to send the SimStated PlatformOrder.</p>\n\n<p>Runtime : After SimStarted is received, this is the state we stay in for \u201cnormal\u201d operations</p>\n\n<p>Paused : In this day, we stop all network notes if possible so something big like a hose migration can happen</p>\n\n<p>Playback : In this state, the state of the platform is being driven by recorded transactional stage changes that are being steam as platform order by one of the network nodes</p>\n\n<p>Stopping : In this state, the platform is treated as undefined because network nodes are expected to disconnect at any moment. Any time a network node is in this state, the network \n              node should work to and/close the local representation of the simulation</p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.SimState.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimState.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.SimState, value: int) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.SimState.name", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimState.name", "kind": "variable", "doc": "<p>name(self: object) -> str</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.SimState.value", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimState.value", "kind": "variable", "doc": "<p>(arg0: spaceteams.SC_Compute_Server.SimState) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.SimState.Loading", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimState.Loading", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SimState.Loading: 0&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.SimState.Lobby", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimState.Lobby", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SimState.Lobby: 1&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.SimState.Runtime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimState.Runtime", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SimState.Runtime: 2&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.SimState.Paused", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimState.Paused", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SimState.Paused: 3&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.SimState.Playback", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimState.Playback", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SimState.Playback: 4&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.SimState.Stopping", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimState.Stopping", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SimState.Stopping: 5&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType", "kind": "class", "doc": "<p>Members:</p>\n\n<p>Uninitialized</p>\n\n<p>Unrecognized</p>\n\n<p>bytes</p>\n\n<p>bitset64</p>\n\n<p>bool</p>\n\n<p>uint8</p>\n\n<p>uint16</p>\n\n<p>uint32</p>\n\n<p>uint64</p>\n\n<p>int8</p>\n\n<p>int16</p>\n\n<p>int32</p>\n\n<p>int64</p>\n\n<p>duration</p>\n\n<p>timestamp</p>\n\n<p>uuid</p>\n\n<p>entityID</p>\n\n<p>entityRef</p>\n\n<p>entityRefUnresolved</p>\n\n<p>float : NOTE: python float is actually VarType double</p>\n\n<p>double : python type is \"float\"</p>\n\n<p>char</p>\n\n<p>doubleV2 : python type is numpy array</p>\n\n<p>doubleV3 : python type is numpy array</p>\n\n<p>doubleV4 : python type is numpy array</p>\n\n<p>doubleM2x2 : python type is numpy matrix</p>\n\n<p>doubleM3x3 : python type is numpy matrix</p>\n\n<p>doubleM4x4 : python type is numpy matrix</p>\n\n<p>doubleM5x5 : python type is numpy matrix</p>\n\n<p>doubleM6x6 : python type is numpy matrix</p>\n\n<p>string</p>\n\n<p>paramArray : python type is a list of the member type</p>\n\n<p>paramMap</p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.VarType, value: int) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.name", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.name", "kind": "variable", "doc": "<p>name(self: object) -> str</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.value", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.value", "kind": "variable", "doc": "<p>(arg0: spaceteams.SC_Compute_Server.VarType) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.Uninitialized", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.Uninitialized", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.Uninitialized: 0&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.Unrecognized", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.Unrecognized", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.Unrecognized: 1&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.bytes", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.bytes", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.bytes: 2&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.bitset64", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.bitset64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.bitset64: 3&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.bool", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.bool", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.bool: 4&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.uint8", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.uint8", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.uint8: 5&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.uint16", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.uint16", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.uint16: 6&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.uint32", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.uint32", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.uint32: 7&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.uint64", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.uint64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.uint64: 8&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.int8", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.int8", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.int8: 9&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.int16", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.int16", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.int16: 10&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.int32", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.int32", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.int32: 11&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.int64", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.int64", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.int64: 12&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.duration", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.duration", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.duration: 13&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.timestamp", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.timestamp", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.timestamp: 14&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.uuid", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.uuid", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.uuid: 15&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.entityID", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.entityID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.entityID: 16&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.entityRef", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.entityRef", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.entityRef: 17&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.entityRefUnresolved", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.entityRefUnresolved", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.entityRefUnresolved: 18&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.float", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.float", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.float: 19&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.double", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.double", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.double: 20&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.char", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.char", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.char: 21&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.doubleV2", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.doubleV2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.doubleV2: 22&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.doubleV3", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.doubleV3", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.doubleV3: 23&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.doubleV4", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.doubleV4", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.doubleV4: 24&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.doubleM2x2", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.doubleM2x2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.doubleM2x2: 25&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.doubleM3x3", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.doubleM3x3", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.doubleM3x3: 26&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.doubleM4x4", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.doubleM4x4", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.doubleM4x4: 27&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.doubleM5x5", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.doubleM5x5", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.doubleM5x5: 28&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.doubleM6x6", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.doubleM6x6", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.doubleM6x6: 29&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.string", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.string", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.string: 30&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.paramArray", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.paramArray", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.paramArray: 31&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.VarType.paramMap", "modulename": "spaceteams.SC_Compute_Server", "qualname": "VarType.paramMap", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;VarType.paramMap: 32&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType", "kind": "class", "doc": "<p>Members:</p>\n\n<p>NoPropagation</p>\n\n<p>ComputePosition</p>\n\n<p>ComputeVelocity</p>\n\n<p>ComputeAcceleration</p>\n\n<p>ComputeJerk</p>\n\n<p>Clientside_FreeBody</p>\n\n<p>Clientside_PawnControl</p>\n\n<p>PhysXInteractible</p>\n\n<p>CoordinateFrame_Static</p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.PropagationType, value: int) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.name", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.name", "kind": "variable", "doc": "<p>name(self: object) -> str</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.value", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.value", "kind": "variable", "doc": "<p>(arg0: spaceteams.SC_Compute_Server.PropagationType) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.NoPropagation", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.NoPropagation", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PropagationType.NoPropagation: 0&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.ComputePosition", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.ComputePosition", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PropagationType.ComputePosition: 1&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.ComputeVelocity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.ComputeVelocity", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PropagationType.ComputeVelocity: 2&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.ComputeAcceleration", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.ComputeAcceleration", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PropagationType.ComputeAcceleration: 3&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.ComputeJerk", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.ComputeJerk", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PropagationType.ComputeJerk: 4&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.Clientside_FreeBody", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.Clientside_FreeBody", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PropagationType.Clientside_FreeBody: 5&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.Clientside_PawnControl", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.Clientside_PawnControl", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PropagationType.Clientside_PawnControl: 6&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.PhysXInteractible", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.PhysXInteractible", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PropagationType.PhysXInteractible: 7&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.PropagationType.CoordinateFrame_Static", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PropagationType.CoordinateFrame_Static", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;PropagationType.CoordinateFrame_Static: 8&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.Severity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Severity", "kind": "class", "doc": "<p>Members:</p>\n\n<p>Info</p>\n\n<p>Warning</p>\n\n<p>Error</p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.Severity.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Severity.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.Severity, value: int) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.Severity.name", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Severity.name", "kind": "variable", "doc": "<p>name(self: object) -> str</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.Severity.value", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Severity.value", "kind": "variable", "doc": "<p>(arg0: spaceteams.SC_Compute_Server.Severity) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.Severity.Info", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Severity.Info", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Severity.Info: 0&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.Severity.Warning", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Severity.Warning", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Severity.Warning: 1&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.Severity.Error", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Severity.Error", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Severity.Error: 2&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.SystemType", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemType", "kind": "class", "doc": "<p>Members:</p>\n\n<p>Normal</p>\n\n<p>Taskflow</p>\n\n<p>TaskflowTask</p>\n\n<p>Internal</p>\n\n<p>Python</p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.SystemType.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemType.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.SystemType, value: int) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.SystemType.name", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemType.name", "kind": "variable", "doc": "<p>name(self: object) -> str</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.SystemType.value", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemType.value", "kind": "variable", "doc": "<p>(arg0: spaceteams.SC_Compute_Server.SystemType) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.SystemType.Normal", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemType.Normal", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SystemType.Normal: 0&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.SystemType.Taskflow", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemType.Taskflow", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SystemType.Taskflow: 1&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.SystemType.TaskflowTask", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemType.TaskflowTask", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SystemType.TaskflowTask: 2&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.SystemType.Internal", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemType.Internal", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SystemType.Internal: 3&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.SystemType.Python", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemType.Python", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SystemType.Python: 4&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.UpdateTimeDomain", "modulename": "spaceteams.SC_Compute_Server", "qualname": "UpdateTimeDomain", "kind": "class", "doc": "<p>Members:</p>\n\n<p>Sim</p>\n\n<p>IRL</p>\n\n<p>NoSleep</p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.UpdateTimeDomain.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "UpdateTimeDomain.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.UpdateTimeDomain, value: int) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.UpdateTimeDomain.name", "modulename": "spaceteams.SC_Compute_Server", "qualname": "UpdateTimeDomain.name", "kind": "variable", "doc": "<p>name(self: object) -> str</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.UpdateTimeDomain.value", "modulename": "spaceteams.SC_Compute_Server", "qualname": "UpdateTimeDomain.value", "kind": "variable", "doc": "<p>(arg0: spaceteams.SC_Compute_Server.UpdateTimeDomain) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.UpdateTimeDomain.Sim", "modulename": "spaceteams.SC_Compute_Server", "qualname": "UpdateTimeDomain.Sim", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;UpdateTimeDomain.Sim: 0&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.UpdateTimeDomain.IRL", "modulename": "spaceteams.SC_Compute_Server", "qualname": "UpdateTimeDomain.IRL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;UpdateTimeDomain.IRL: 1&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.UpdateTimeDomain.NoSleep", "modulename": "spaceteams.SC_Compute_Server", "qualname": "UpdateTimeDomain.NoSleep", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;UpdateTimeDomain.NoSleep: 2&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.Notation", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Notation", "kind": "class", "doc": "<p>Members:</p>\n\n<p>Default</p>\n\n<p>DigitsAfterDecimal</p>\n\n<p>Scientific</p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.Notation.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Notation.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.Notation, value: int) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.Notation.name", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Notation.name", "kind": "variable", "doc": "<p>name(self: object) -> str</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.Notation.value", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Notation.value", "kind": "variable", "doc": "<p>(arg0: spaceteams.SC_Compute_Server.Notation) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.Notation.Default", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Notation.Default", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Notation.Default: 0&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.Notation.DigitsAfterDecimal", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Notation.DigitsAfterDecimal", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Notation.DigitsAfterDecimal: 1&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.Notation.Scientific", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Notation.Scientific", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Notation.Scientific: 2&gt;"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.NorthWestUp", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.NorthWestUp.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp, north: numpy.ndarray[numpy.float64[3, 1]], west: numpy.ndarray[numpy.float64[3, 1]], up: numpy.ndarray[numpy.float64[3, 1]]) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp.north", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.NorthWestUp.north", "kind": "function", "doc": "<p>north(self: spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp.west", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.NorthWestUp.west", "kind": "function", "doc": "<p>west(self: spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp.up", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.NorthWestUp.up", "kind": "function", "doc": "<p>up(self: spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.ForwardLeftUp", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.ForwardLeftUp.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp, forward: numpy.ndarray[numpy.float64[3, 1]], left: numpy.ndarray[numpy.float64[3, 1]], up: numpy.ndarray[numpy.float64[3, 1]]) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp.forward", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.ForwardLeftUp.forward", "kind": "function", "doc": "<p>forward(self: spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp.left", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.ForwardLeftUp.left", "kind": "function", "doc": "<p>left(self: spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp.up", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.ForwardLeftUp.up", "kind": "function", "doc": "<p>up(self: spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.LatLonAlt", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.LatLonAlt.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt, lat: float, lon: float, alt: float) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt.lat", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.LatLonAlt.lat", "kind": "function", "doc": "<p>lat(self: spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt.lon", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.LatLonAlt.lon", "kind": "function", "doc": "<p>lon(self: spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt.alt", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.LatLonAlt.alt", "kind": "function", "doc": "<p>alt(self: spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.Coord", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.Coord", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.Coord.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.Coord.__init__", "kind": "function", "doc": "<p>__init__(<em>args, *</em>kwargs)\nOverloaded function.</p>\n\n<ol>\n<li><p>__init__(self: spaceteams.SC_Compute_Server.PlanetUtils.Coord, loc: numpy.ndarray[numpy.float64[3, 1]], rot: numpy.ndarray[numpy.float64[3, 3]], radius: float) -> None</p></li>\n\n\n<li><p>__init__(self: spaceteams.SC_Compute_Server.PlanetUtils.Coord, lla: spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt, azimuth: float, radius: float) -> None</p></li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.Coord.getLoc", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.Coord.getLoc", "kind": "function", "doc": "<p>getLoc(self: spaceteams.SC_Compute_Server.PlanetUtils.Coord) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.Coord.getRot", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.Coord.getRot", "kind": "function", "doc": "<p>getRot(self: spaceteams.SC_Compute_Server.PlanetUtils.Coord) -> numpy.ndarray[numpy.float64[3, 3]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.Coord.getLatLonAlt", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.Coord.getLatLonAlt", "kind": "function", "doc": "<p>getLatLonAlt(self: spaceteams.SC_Compute_Server.PlanetUtils.Coord) -> spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.Coord.getNWU", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.Coord.getNWU", "kind": "function", "doc": "<p>getNWU(self: spaceteams.SC_Compute_Server.PlanetUtils.Coord) -> spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.Coord.getFLU", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.Coord.getFLU", "kind": "function", "doc": "<p>getFLU(self: spaceteams.SC_Compute_Server.PlanetUtils.Coord) -> spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.Coord.getAzimuth", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.Coord.getAzimuth", "kind": "function", "doc": "<p>getAzimuth(self: spaceteams.SC_Compute_Server.PlanetUtils.Coord) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.Coord.getRadius", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.Coord.getRadius", "kind": "function", "doc": "<p>getRadius(self: spaceteams.SC_Compute_Server.PlanetUtils.Coord) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.LLA_to_PCPF", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.LLA_to_PCPF", "kind": "function", "doc": "<p>LLA_to_PCPF(latlonalt: spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt, radius: float) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.PCPF_to_LLA", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.PCPF_to_LLA", "kind": "function", "doc": "<p>PCPF_to_LLA(loc: numpy.ndarray[numpy.float64[3, 1]], radius: float) -> spaceteams.SC_Compute_Server.PlanetUtils.LatLonAlt</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUpFromLocation", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.NorthWestUpFromLocation", "kind": "function", "doc": "<p>NorthWestUpFromLocation(loc: numpy.ndarray[numpy.float64[3, 1]], radius: float) -> spaceteams.SC_Compute_Server.PlanetUtils.NorthWestUp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.AzimuthFromLocRot", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.AzimuthFromLocRot", "kind": "function", "doc": "<p>AzimuthFromLocRot(loc: numpy.ndarray[numpy.float64[3, 1]], rot: numpy.ndarray[numpy.float64[3, 3]], radius: float) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUpFromAzimuth", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.ForwardLeftUpFromAzimuth", "kind": "function", "doc": "<p>ForwardLeftUpFromAzimuth(loc: numpy.ndarray[numpy.float64[3, 1]], azimuth: float, radius: float) -> spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.RotFromForwardLeftUp", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.RotFromForwardLeftUp", "kind": "function", "doc": "<p>RotFromForwardLeftUp(flu: spaceteams.SC_Compute_Server.PlanetUtils.ForwardLeftUp) -> numpy.ndarray[numpy.float64[3, 3]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PlanetUtils.RotFromAzimuth", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PlanetUtils.RotFromAzimuth", "kind": "function", "doc": "<p>RotFromAzimuth(loc: numpy.ndarray[numpy.float64[3, 1]], azimuth: float, radius: float) -> numpy.ndarray[numpy.float64[3, 3]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove.GetMovementState", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove.GetMovementState", "kind": "function", "doc": "<p>GetMovementState(en: Entity) -> str</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove.TurnToAzimuth", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove.TurnToAzimuth", "kind": "function", "doc": "<p>TurnToAzimuth(en: Entity, azimuth: float, pcpf: st_math::ReferenceFrames::Frame, radius: float) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove.TurnAndMoveToCoord", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove.TurnAndMoveToCoord", "kind": "function", "doc": "<p>TurnAndMoveToCoord(en: Entity, coord: spaceteams.SC_Compute_Server.PlanetUtils.Coord, pcpf: st_math::ReferenceFrames::Frame, radius: float) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove.TurnAndReverseToCoord", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove.TurnAndReverseToCoord", "kind": "function", "doc": "<p>TurnAndReverseToCoord(en: Entity, coord: spaceteams.SC_Compute_Server.PlanetUtils.Coord, pcpf: st_math::ReferenceFrames::Frame, radius: float) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove.GetCurrentCoord", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove.GetCurrentCoord", "kind": "function", "doc": "<p>GetCurrentCoord(en: Entity, pcpf: st_math::ReferenceFrames::Frame, radius: float) -> spaceteams.SC_Compute_Server.PlanetUtils.Coord</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove.GetAzimuth", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove.GetAzimuth", "kind": "function", "doc": "<p>GetAzimuth(en: Entity, pcpf: st_math::ReferenceFrames::Frame, radius: float) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove.GetMoveToCoord", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove.GetMoveToCoord", "kind": "function", "doc": "<p>GetMoveToCoord(en: Entity, pcpf: st_math::ReferenceFrames::Frame, radius: float) -> spaceteams.SC_Compute_Server.PlanetUtils.Coord</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove.IsMoving", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove.IsMoving", "kind": "function", "doc": "<p>IsMoving(en: Entity) -> bool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SurfaceMove.OnMoveComplete", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SurfaceMove.OnMoveComplete", "kind": "function", "doc": "<p>OnMoveComplete(en: Entity, reaction: Callable[[GenParamMap], None]) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.CartesianState", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CartesianState", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.CartesianState.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CartesianState.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.CartesianState, R_km: numpy.ndarray[numpy.float64[3, 1]], V_km_s: numpy.ndarray[numpy.float64[3, 1]], mu_km3_s2: float) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.CartesianState.R", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CartesianState.R", "kind": "function", "doc": "<p>R(self: spaceteams.SC_Compute_Server.CartesianState) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.CartesianState.V", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CartesianState.V", "kind": "function", "doc": "<p>V(self: spaceteams.SC_Compute_Server.CartesianState) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.CartesianState.mu", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CartesianState.mu", "kind": "function", "doc": "<p>mu(self: spaceteams.SC_Compute_Server.CartesianState) -> au::Quantity<au::UnitProduct<au::Pow<au::Kilo<au::Meters>,3>,au::Pow<au::Seconds,-2> &gt;,double></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.KeplerianState", "modulename": "spaceteams.SC_Compute_Server", "qualname": "KeplerianState", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.KeplerianState.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "KeplerianState.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.KeplerianState, a_km: float, e: float, raan_rad: float, i_rad: float, omega_rad: float, ta_rad: float, mu_km3_s2: float) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.KeplerianState.a", "modulename": "spaceteams.SC_Compute_Server", "qualname": "KeplerianState.a", "kind": "function", "doc": "<p>a(self: spaceteams.SC_Compute_Server.KeplerianState) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.KeplerianState.e", "modulename": "spaceteams.SC_Compute_Server", "qualname": "KeplerianState.e", "kind": "function", "doc": "<p>e(self: spaceteams.SC_Compute_Server.KeplerianState) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.KeplerianState.raan", "modulename": "spaceteams.SC_Compute_Server", "qualname": "KeplerianState.raan", "kind": "function", "doc": "<p>raan(self: spaceteams.SC_Compute_Server.KeplerianState) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.KeplerianState.i", "modulename": "spaceteams.SC_Compute_Server", "qualname": "KeplerianState.i", "kind": "function", "doc": "<p>i(self: spaceteams.SC_Compute_Server.KeplerianState) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.KeplerianState.omega", "modulename": "spaceteams.SC_Compute_Server", "qualname": "KeplerianState.omega", "kind": "function", "doc": "<p>omega(self: spaceteams.SC_Compute_Server.KeplerianState) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.KeplerianState.ta", "modulename": "spaceteams.SC_Compute_Server", "qualname": "KeplerianState.ta", "kind": "function", "doc": "<p>ta(self: spaceteams.SC_Compute_Server.KeplerianState) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.KeplerianState.mu", "modulename": "spaceteams.SC_Compute_Server", "qualname": "KeplerianState.mu", "kind": "function", "doc": "<p>mu(self: spaceteams.SC_Compute_Server.KeplerianState) -> au::Quantity<au::UnitProduct<au::Pow<au::Kilo<au::Meters>,3>,au::Pow<au::Seconds,-2> &gt;,double></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.LambertBattinResults", "modulename": "spaceteams.SC_Compute_Server", "qualname": "LambertBattinResults", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.LambertBattinResults.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "LambertBattinResults.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.LambertBattinResults, v0_km_s: numpy.ndarray[numpy.float64[3, 1]], v_km_s: numpy.ndarray[numpy.float64[3, 1]]) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.LambertBattinResults.v0", "modulename": "spaceteams.SC_Compute_Server", "qualname": "LambertBattinResults.v0", "kind": "function", "doc": "<p>v0(self: spaceteams.SC_Compute_Server.LambertBattinResults) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.LambertBattinResults.v", "modulename": "spaceteams.SC_Compute_Server", "qualname": "LambertBattinResults.v", "kind": "function", "doc": "<p>v(self: spaceteams.SC_Compute_Server.LambertBattinResults) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.State", "modulename": "spaceteams.SC_Compute_Server", "qualname": "State", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.State.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "State.__init__", "kind": "function", "doc": "<p>__init__(<em>args, *</em>kwargs)\nOverloaded function.</p>\n\n<ol>\n<li><p>__init__(self: spaceteams.SC_Compute_Server.State) -> None</p></li>\n<li><p>__init__(self: spaceteams.SC_Compute_Server.State, arg0: spaceteams.SC_Compute_Server.CartesianState) -> None</p></li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.State.fromCartesian", "modulename": "spaceteams.SC_Compute_Server", "qualname": "State.fromCartesian", "kind": "function", "doc": "<p>fromCartesian(R_km: numpy.ndarray[numpy.float64[3, 1]], V_km_s: numpy.ndarray[numpy.float64[3, 1]], mu_km3_s2: float) -> spaceteams.SC_Compute_Server.State</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.State.fromKeplerian", "modulename": "spaceteams.SC_Compute_Server", "qualname": "State.fromKeplerian", "kind": "function", "doc": "<p>fromKeplerian(a_km: float, e: float, raan_rad: float, i_rad: float, omega_rad: float, ta_rad: float, mu_km3_s2: float) -> spaceteams.SC_Compute_Server.State</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.State.asCartesian", "modulename": "spaceteams.SC_Compute_Server", "qualname": "State.asCartesian", "kind": "function", "doc": "<p>asCartesian(self: spaceteams.SC_Compute_Server.State) -> spaceteams.SC_Compute_Server.CartesianState</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.State.asKeplerian", "modulename": "spaceteams.SC_Compute_Server", "qualname": "State.asKeplerian", "kind": "function", "doc": "<p>asKeplerian(self: spaceteams.SC_Compute_Server.State) -> spaceteams.SC_Compute_Server.KeplerianState</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.State.timeSincePeriapsis", "modulename": "spaceteams.SC_Compute_Server", "qualname": "State.timeSincePeriapsis", "kind": "function", "doc": "<p>timeSincePeriapsis(self: spaceteams.SC_Compute_Server.State) -> float</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.GetState", "modulename": "spaceteams.SC_Compute_Server", "qualname": "GetState", "kind": "function", "doc": "<p>GetState(en: Entity, frame: st_math::ReferenceFrames::Frame, mu: float) -> spaceteams.SC_Compute_Server.State</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SetState", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SetState", "kind": "function", "doc": "<p>SetState(state: spaceteams.SC_Compute_Server.State, en: Entity, frame: st_math::ReferenceFrames::Frame) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.calcTime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "calcTime", "kind": "function", "doc": "<p>calcTime(arg0: float, arg1: float, arg2: float, arg3: float, arg4: numpy.ndarray[numpy.float64[3, 1]]) -> au::Quantity<au::Seconds,double></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.LagrangePropagation", "modulename": "spaceteams.SC_Compute_Server", "qualname": "LagrangePropagation", "kind": "function", "doc": "<p>LagrangePropagation(state: spaceteams.SC_Compute_Server.State, delta_t: float, tolerance: float, max_iterations: int) -> spaceteams.SC_Compute_Server.State</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.LambertBattin", "modulename": "spaceteams.SC_Compute_Server", "qualname": "LambertBattin", "kind": "function", "doc": "<p>LambertBattin(r0: numpy.ndarray[numpy.float64[3, 1]], r: numpy.ndarray[numpy.float64[3, 1]], deltaTime: float, tm: float, mu: float, n: int, tol: float, max_iter: int) -> spaceteams.SC_Compute_Server.LambertBattinResults</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.timestamp", "modulename": "spaceteams.SC_Compute_Server", "qualname": "timestamp", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.timestamp.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "timestamp.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.timestamp) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.timestamp.as_datetime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "timestamp.as_datetime", "kind": "function", "doc": "<p>as_datetime(self: spaceteams.SC_Compute_Server.timestamp) -> object</p>\n\n<p>Gets the timestamp as a Python datetime. This converts the time from the TAI clock to system_clock (~UTC).\n                        See this for more clock choice details: <a href=\"https://stackoverflow.com/a/64084510/11502722\">https://stackoverflow.com/a/64084510/11502722</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.timestamp.from_datetime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "timestamp.from_datetime", "kind": "function", "doc": "<p>from_datetime(self: object) -> spaceteams.SC_Compute_Server.timestamp</p>\n\n<p>Construct a timestamp object from a Python datetime. This converts the time from the system_clock (~UTC) to the sim TAI clock.\n                        See this for more clock choice details: <a href=\"https://stackoverflow.com/a/64084510/11502722\">https://stackoverflow.com/a/64084510/11502722</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.timestamp.as_tai_string", "modulename": "spaceteams.SC_Compute_Server", "qualname": "timestamp.as_tai_string", "kind": "function", "doc": "<p>as_tai_string(self: spaceteams.SC_Compute_Server.timestamp) -> str</p>\n\n<p>Return a string of the timestamp, keeping it as TAI clock.\n                        See this for more clock choice details: <a href=\"https://stackoverflow.com/a/64084510/11502722\">https://stackoverflow.com/a/64084510/11502722</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.timestamp.as_utc_string", "modulename": "spaceteams.SC_Compute_Server", "qualname": "timestamp.as_utc_string", "kind": "function", "doc": "<p>as_utc_string(self: spaceteams.SC_Compute_Server.timestamp) -> str</p>\n\n<p>Return a string of the timestamp after converting it to UTC.\n                        See this for more clock choice details: <a href=\"https://stackoverflow.com/a/64084510/11502722\">https://stackoverflow.com/a/64084510/11502722</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.EntityRef_Unresolved", "modulename": "spaceteams.SC_Compute_Server", "qualname": "EntityRef_Unresolved", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.EntityRef_Unresolved.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "EntityRef_Unresolved.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.EntityRef_Unresolved, entity_name: str) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.ParamMap) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.unique_id", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.unique_id", "kind": "function", "doc": "<p>unique_id(self: spaceteams.SC_Compute_Server.ParamMap) -> int</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.HasParam", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.HasParam", "kind": "function", "doc": "<p>HasParam(<em>args, *</em>kwargs)\nOverloaded function.</p>\n\n<ol>\n<li>HasParam(self: spaceteams.SC_Compute_Server.ParamMap, key: str) -> bool</li>\n</ol>\n\n<p>Checks if this Entity has a parameter at the given key.</p>\n\n<ol start=\"2\">\n<li>HasParam(self: spaceteams.SC_Compute_Server.ParamMap, key: object) -> bool</li>\n</ol>\n\n<p>Checks if this Entity has a parameter at the given key.</p>\n\n<ol start=\"3\">\n<li>HasParam(self: spaceteams.SC_Compute_Server.ParamMap, type: spaceteams.SC_Compute_Server.VarType, key: object) -> bool</li>\n</ol>\n\n<p>Checks if this Entity has a parameter at the given key with the given type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.ToString", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.ToString", "kind": "function", "doc": "<p>ToString(self: spaceteams.SC_Compute_Server.ParamMap, notation: spaceteams.SC_Compute_Server.Notation = Select decimal notation, precision: int = Number of significant digits printed) -> str</p>\n\n<p>Returns a string of the keys/values of this ParamMap, with a certain notation and precision. Avoids newline characters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.ToStringMultiline", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.ToStringMultiline", "kind": "function", "doc": "<p>ToStringMultiline(self: spaceteams.SC_Compute_Server.ParamMap, notation: spaceteams.SC_Compute_Server.Notation = Select decimal notation, precision: int = Number of significant digits printed) -> str</p>\n\n<p>Returns a string of the keys/values of this ParamMap, with a certain notation and precision. Avoids newline characters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.HasParamArray", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.HasParamArray", "kind": "function", "doc": "<p>HasParamArray(<em>args, *</em>kwargs)\nOverloaded function.</p>\n\n<ol>\n<li>HasParamArray(self: spaceteams.SC_Compute_Server.ParamMap, key: object) -> bool</li>\n</ol>\n\n<p>Checks if this Entity has a param array at the given key with any member type.</p>\n\n<ol start=\"2\">\n<li>HasParamArray(self: spaceteams.SC_Compute_Server.ParamMap, type: spaceteams.SC_Compute_Server.VarType, key: object) -> bool</li>\n</ol>\n\n<p>Checks if this Entity has a param array at the given key with the given member type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.GetParamType", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.GetParamType", "kind": "function", "doc": "<p>GetParamType(self: spaceteams.SC_Compute_Server.ParamMap, key: object) -> spaceteams.SC_Compute_Server.VarType</p>\n\n<p>Returns the VarType of the parameter at the given key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.GetParamArrayType", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.GetParamArrayType", "kind": "function", "doc": "<p>GetParamArrayType(self: spaceteams.SC_Compute_Server.ParamMap, key: object) -> spaceteams.SC_Compute_Server.VarType</p>\n\n<p>Returns the VarType of the parameter array at the given key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.GetParamTime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.GetParamTime", "kind": "function", "doc": "<p>GetParamTime(self: spaceteams.SC_Compute_Server.ParamMap, key: object) -> spaceteams.SC_Compute_Server.timestamp</p>\n\n<p>Returns the timestamp of the edited-time of the parameter at the given key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.GetParamMap", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.GetParamMap", "kind": "function", "doc": "<p>GetParamMap(self: spaceteams.SC_Compute_Server.ParamMap, keys: object) -> spaceteams.SC_Compute_Server.ParamMap</p>\n\n<p>Get pointer to the GenParamMap at this key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.GetParam", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.GetParam", "kind": "function", "doc": "<p>GetParam(self: spaceteams.SC_Compute_Server.ParamMap, type: spaceteams.SC_Compute_Server.VarType, key: object) -> object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.SetParam", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.SetParam", "kind": "function", "doc": "<p>SetParam(self: spaceteams.SC_Compute_Server.ParamMap, type: spaceteams.SC_Compute_Server.VarType, key: object, value: object) -> None</p>\n\n<p>Set the value of the parameter at the given key on this GenParamMap with the given value. \n                        There is a runtime check for if this parameter is actually the type you specified to it be.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.AddParam", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.AddParam", "kind": "function", "doc": "<p>AddParam(self: spaceteams.SC_Compute_Server.ParamMap, type: spaceteams.SC_Compute_Server.VarType, key: object, value: object) -> None</p>\n\n<p>adds a new parameter at the given key on this entity. The input is in the form of std::vector. \n                        There is a static check for if this parameter is actually of a support type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.SetParamArray", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.SetParamArray", "kind": "function", "doc": "<p>SetParamArray(self: spaceteams.SC_Compute_Server.ParamMap, type: spaceteams.SC_Compute_Server.VarType, key: object, value: list) -> None</p>\n\n<p>Set the value of the parameter at the given key on this GenParamMap with the given value.\n                        The input is in the form of std::vector. There is a runtime check for if this parameter is actually\n                        the type you specified to it be. The array will resized itself as needed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.AddParamArray", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.AddParamArray", "kind": "function", "doc": "<p>AddParamArray(self: spaceteams.SC_Compute_Server.ParamMap, type: spaceteams.SC_Compute_Server.VarType, key: object, value: list) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.GetParamArray", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.GetParamArray", "kind": "function", "doc": "<p>GetParamArray(self: spaceteams.SC_Compute_Server.ParamMap, type: spaceteams.SC_Compute_Server.VarType, key: object) -> object</p>\n\n<p>Get a copy of the values from the Parameter Array at the given key on this GenParamMap. \n                        This copy is in the form of a std::vector.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.AddOrSetParam", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.AddOrSetParam", "kind": "function", "doc": "<p>AddOrSetParam(self: spaceteams.SC_Compute_Server.ParamMap, type: spaceteams.SC_Compute_Server.VarType, key: object, value: object) -> bool</p>\n\n<p>Returns whether the parameter previously existed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.AddCopiesOfAllParamsFrom", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.AddCopiesOfAllParamsFrom", "kind": "function", "doc": "<p>AddCopiesOfAllParamsFrom(self: spaceteams.SC_Compute_Server.ParamMap, other: spaceteams.SC_Compute_Server.ParamMap) -> None</p>\n\n<p>Adds a DeepCopy of all the params on another GenParamMap to this one\n                       NOTE: If there are name collisions, this will perform a Set on same-\n                       type colliding params, or throw for differing type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.ForEachParam", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.ForEachParam", "kind": "function", "doc": "<p>ForEachParam(self: spaceteams.SC_Compute_Server.ParamMap, operations: Callable[[str, spaceteams.SC_Compute_Server.VarType], None]) -> None</p>\n\n<p>For each of the parameters in this PramMap, supply the key and type and do <operations> Doesn\u2019t allow access to pointer because it\u2019s non-const\n                        The operation passed in their are std::function, which is usually made as a lambda function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.DeleteParam", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.DeleteParam", "kind": "function", "doc": "<p>DeleteParam(self: spaceteams.SC_Compute_Server.ParamMap, key: object) -> None</p>\n\n<p>Remove from map and free memory for a param</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.ParamMap.GetParamAsString", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ParamMap.GetParamAsString", "kind": "function", "doc": "<p>GetParamAsString(self: spaceteams.SC_Compute_Server.ParamMap, key: object) -> str</p>\n\n<p>Get what this parameter value's ToString() function would output, without needing to specify the type of parameter value to get.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.EntityConfig", "modulename": "spaceteams.SC_Compute_Server", "qualname": "EntityConfig", "kind": "class", "doc": "<p></p>\n", "bases": "ParamMap"}, {"fullname": "spaceteams.SC_Compute_Server.EntityConfig.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "EntityConfig.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.EntityConfig) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.EntityConfig.getName", "modulename": "spaceteams.SC_Compute_Server", "qualname": "EntityConfig.getName", "kind": "function", "doc": "<p>getName(self: spaceteams.SC_Compute_Server.EntityConfig) -> str</p>\n\n<p>Get the name of this EntityConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.EntityConfig.LoadFromFile", "modulename": "spaceteams.SC_Compute_Server", "qualname": "EntityConfig.LoadFromFile", "kind": "function", "doc": "<p>LoadFromFile(filepath: str) -> spaceteams.SC_Compute_Server.EntityConfig</p>\n\n<p>Read a EntityConfig from a properly formatted JSON file. Has good logging code for feedback about invalid syntax.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.EntityConfig.SaveToFile", "modulename": "spaceteams.SC_Compute_Server", "qualname": "EntityConfig.SaveToFile", "kind": "function", "doc": "<p>SaveToFile(self: spaceteams.SC_Compute_Server.EntityConfig, filepath: str) -> None</p>\n\n<p>Write this EntityConfig to a JSON file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig", "kind": "class", "doc": "<p></p>\n", "bases": "ParamMap"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.SystemConfig) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.active", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.active", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.SystemConfig) -> bool</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.singleton", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.singleton", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.SystemConfig) -> bool</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.source", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.source", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.SystemConfig) -> str</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.type", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.type", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.SystemConfig) -> spaceteams.SC_Compute_Server.SystemType</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.frequency", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.frequency", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.SystemConfig) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.freqType", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.freqType", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.SystemConfig) -> spaceteams.SC_Compute_Server.UpdateTimeDomain</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.getNameTag", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.getNameTag", "kind": "function", "doc": "<p>getNameTag(self: spaceteams.SC_Compute_Server.SystemConfig) -> str</p>\n\n<p>Get the name tag of this SystemConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.getFrequency", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.getFrequency", "kind": "function", "doc": "<p>getFrequency(self: spaceteams.SC_Compute_Server.SystemConfig) -> float</p>\n\n<p>Get the frequency of this SystemConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.setFrequency", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.setFrequency", "kind": "function", "doc": "<p>setFrequency(self: spaceteams.SC_Compute_Server.SystemConfig, frequency: float) -> None</p>\n\n<p>Set the frequency of this SystemConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SystemConfig.getSource", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SystemConfig.getSource", "kind": "function", "doc": "<p>getSource(self: spaceteams.SC_Compute_Server.SystemConfig) -> str</p>\n\n<p>Get the source of this SystemConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.TaskflowConfig", "modulename": "spaceteams.SC_Compute_Server", "qualname": "TaskflowConfig", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.TaskflowConfig.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "TaskflowConfig.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.TaskflowConfig) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.TaskflowConfig.active", "modulename": "spaceteams.SC_Compute_Server", "qualname": "TaskflowConfig.active", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.TaskflowConfig) -> bool</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.TaskflowConfig.frequency", "modulename": "spaceteams.SC_Compute_Server", "qualname": "TaskflowConfig.frequency", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.TaskflowConfig) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.TaskflowConfig.freqType", "modulename": "spaceteams.SC_Compute_Server", "qualname": "TaskflowConfig.freqType", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.TaskflowConfig) -> spaceteams.SC_Compute_Server.UpdateTimeDomain</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.TaskflowConfig.systems", "modulename": "spaceteams.SC_Compute_Server", "qualname": "TaskflowConfig.systems", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.TaskflowConfig) -> list[str]</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.TaskflowConfig.getNameTag", "modulename": "spaceteams.SC_Compute_Server", "qualname": "TaskflowConfig.getNameTag", "kind": "function", "doc": "<p>getNameTag(self: spaceteams.SC_Compute_Server.TaskflowConfig) -> str</p>\n\n<p>Get the name tag of this TaskflowConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.TaskflowConfig.getFrequency", "modulename": "spaceteams.SC_Compute_Server", "qualname": "TaskflowConfig.getFrequency", "kind": "function", "doc": "<p>getFrequency(self: spaceteams.SC_Compute_Server.TaskflowConfig) -> float</p>\n\n<p>Get the frequency of this TaskflowConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.TaskflowConfig.setFrequency", "modulename": "spaceteams.SC_Compute_Server", "qualname": "TaskflowConfig.setFrequency", "kind": "function", "doc": "<p>setFrequency(self: spaceteams.SC_Compute_Server.TaskflowConfig, frequency: float) -> None</p>\n\n<p>Set the frequency of this TaskflowConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.TaskflowConfig.getSystems", "modulename": "spaceteams.SC_Compute_Server", "qualname": "TaskflowConfig.getSystems", "kind": "function", "doc": "<p>getSystems(self: spaceteams.SC_Compute_Server.TaskflowConfig) -> list[str]</p>\n\n<p>Get the system  of this TaskflowConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.SimConfig) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.AddEntity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.AddEntity", "kind": "function", "doc": "<p>AddEntity(self: spaceteams.SC_Compute_Server.SimConfig, config: spaceteams.SC_Compute_Server.EntityConfig) -> None</p>\n\n<p>Adds a (assumed-properly-initialized) EntityConfig to the sim config</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.RemoveEntity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.RemoveEntity", "kind": "function", "doc": "<p>RemoveEntity(self: spaceteams.SC_Compute_Server.SimConfig, config: spaceteams.SC_Compute_Server.EntityConfig) -> None</p>\n\n<p>Removes this referenced Entity from the sim config</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.GetSimEntity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.GetSimEntity", "kind": "function", "doc": "<p>GetSimEntity(self: spaceteams.SC_Compute_Server.SimConfig) -> spaceteams.SC_Compute_Server.EntityConfig</p>\n\n<p>Identify the name of the EntityConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.GetSimStartTime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.GetSimStartTime", "kind": "function", "doc": "<p>GetSimStartTime(self: spaceteams.SC_Compute_Server.SimConfig) -> spaceteams.SC_Compute_Server.timestamp</p>\n\n<p>Get the time of the sim clock will read at the beginning of the sim. \n                        This value will not be applicable if UsCurrentTime = true</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.SetSimStartTime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.SetSimStartTime", "kind": "function", "doc": "<p>SetSimStartTime(self: spaceteams.SC_Compute_Server.SimConfig, simtime: spaceteams.SC_Compute_Server.timestamp) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.HasSimEndTime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.HasSimEndTime", "kind": "function", "doc": "<p>HasSimEndTime(self: spaceteams.SC_Compute_Server.SimConfig) -> bool</p>\n\n<p>Return the boolean of if this sim has an end time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.GetSimEndTime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.GetSimEndTime", "kind": "function", "doc": "<p>GetSimEndTime(self: spaceteams.SC_Compute_Server.SimConfig) -> spaceteams.SC_Compute_Server.timestamp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.SetSimEndTime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.SetSimEndTime", "kind": "function", "doc": "<p>SetSimEndTime(self: spaceteams.SC_Compute_Server.SimConfig, simtime: spaceteams.SC_Compute_Server.timestamp) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.RemoveSimEndTime", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.RemoveSimEndTime", "kind": "function", "doc": "<p>RemoveSimEndTime(self: spaceteams.SC_Compute_Server.SimConfig) -> None</p>\n\n<p>Removes the timestamped-based sim end condition</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.GetEntities", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.GetEntities", "kind": "function", "doc": "<p>GetEntities(self: spaceteams.SC_Compute_Server.SimConfig) -> list[spaceteams.SC_Compute_Server.EntityConfig]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.GetEntityTemplates", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.GetEntityTemplates", "kind": "function", "doc": "<p>GetEntityTemplates(self: spaceteams.SC_Compute_Server.SimConfig) -> list[spaceteams.SC_Compute_Server.EntityConfig]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.AddSystem", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.AddSystem", "kind": "function", "doc": "<p>AddSystem(self: spaceteams.SC_Compute_Server.SimConfig, config: spaceteams.SC_Compute_Server.SystemConfig) -> None</p>\n\n<p>Adds a (assumed-properly-initialized) SystemConfig to the sim config</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.RemoveSystem", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.RemoveSystem", "kind": "function", "doc": "<p>RemoveSystem(self: spaceteams.SC_Compute_Server.SimConfig, config: spaceteams.SC_Compute_Server.SystemConfig) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.GetSystems", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.GetSystems", "kind": "function", "doc": "<p>GetSystems(self: spaceteams.SC_Compute_Server.SimConfig) -> list[spaceteams.SC_Compute_Server.SystemConfig]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.AddTaskflow", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.AddTaskflow", "kind": "function", "doc": "<p>AddTaskflow(self: spaceteams.SC_Compute_Server.SimConfig, config: spaceteams.SC_Compute_Server.TaskflowConfig) -> None</p>\n\n<p>Adds a (assumed-properly-initialized) TaskflowConfig to the sim config.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.RemoveTaskflow", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.RemoveTaskflow", "kind": "function", "doc": "<p>RemoveTaskflow(self: spaceteams.SC_Compute_Server.SimConfig, config: spaceteams.SC_Compute_Server.TaskflowConfig) -> None</p>\n\n<p>Removes this referenced Taskflow instance from the sim config.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.LoadFromFile", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.LoadFromFile", "kind": "function", "doc": "<p>LoadFromFile(filepath: str) -> spaceteams.SC_Compute_Server.SimConfig</p>\n\n<p>Read a SimConfig from a properly formatted JSON file. Has good logging code for feedback about invalid syntax.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig.SaveToFile", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig.SaveToFile", "kind": "function", "doc": "<p>SaveToFile(self: spaceteams.SC_Compute_Server.SimConfig, filepath: str) -> None</p>\n\n<p>Write this SimConfig to a JSON file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig_LoadFromFile", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig_LoadFromFile", "kind": "function", "doc": "<p>SimConfig_LoadFromFile(filepath: str) -> spaceteams.SC_Compute_Server.SimConfig</p>\n\n<p>Deprecated; use SimConfig.LoadFromFile() instead.\n                Read a SimConfig from a properly formatted JSON file. Has good logging code for feedback about invalid syntax.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimConfig_SaveToFile", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimConfig_SaveToFile", "kind": "function", "doc": "<p>SimConfig_SaveToFile(simconf: spaceteams.SC_Compute_Server.SimConfig, filepath: str) -> None</p>\n\n<p>Deprecated; use SimConfig.SaveToFile() instead.\n                Write a SimConfig to a JSON file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Frame", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Frame", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.Frame.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Frame.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spaceteams.SC_Compute_Server.BaseFrame_Impl", "modulename": "spaceteams.SC_Compute_Server", "qualname": "BaseFrame_Impl", "kind": "class", "doc": "<p></p>\n", "bases": "Frame"}, {"fullname": "spaceteams.SC_Compute_Server.BaseFrame_Impl.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "BaseFrame_Impl.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spaceteams.SC_Compute_Server.rv_struct", "modulename": "spaceteams.SC_Compute_Server", "qualname": "rv_struct", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.rv_struct.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "rv_struct.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.rv_struct, arg0: numpy.ndarray[numpy.float64[3, 1]], arg1: numpy.ndarray[numpy.float64[3, 1]]) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.rv_struct.loc", "modulename": "spaceteams.SC_Compute_Server", "qualname": "rv_struct.loc", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.rv_struct) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.rv_struct.vel", "modulename": "spaceteams.SC_Compute_Server", "qualname": "rv_struct.vel", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.rv_struct) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.rva_struct", "modulename": "spaceteams.SC_Compute_Server", "qualname": "rva_struct", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.rva_struct.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "rva_struct.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.rva_struct, arg0: numpy.ndarray[numpy.float64[3, 1]], arg1: numpy.ndarray[numpy.float64[3, 1]], arg2: numpy.ndarray[numpy.float64[3, 1]]) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.rva_struct.loc", "modulename": "spaceteams.SC_Compute_Server", "qualname": "rva_struct.loc", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.rva_struct) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.rva_struct.vel", "modulename": "spaceteams.SC_Compute_Server", "qualname": "rva_struct.vel", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.rva_struct) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.rva_struct.acc", "modulename": "spaceteams.SC_Compute_Server", "qualname": "rva_struct.acc", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.rva_struct) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.FramedVector", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedVector", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.FramedVector.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedVector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spaceteams.SC_Compute_Server.FramedVector.ExprIn", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedVector.ExprIn", "kind": "function", "doc": "<p>ExprIn(self: spaceteams.SC_Compute_Server.FramedVector, expr_frame: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n\n<p>Express the vector in a specified frame (coordinate basis).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLoc", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLoc", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLoc.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLoc.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.FramedLoc, loc: numpy.ndarray[numpy.float64[3, 1]], frame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLoc.WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLoc.WRT", "kind": "function", "doc": "<p>WRT(self: spaceteams.SC_Compute_Server.FramedLoc, inFrame: spaceteams.SC_Compute_Server.Frame) -> spaceteams.SC_Compute_Server.FramedVector</p>\n\n<p>Resolve the location with respect to a specified frame, performing transport theorem.\n                        Returns a FramedVector so you can do ExprIn to specify coordinate basis the location\n                        vector should be expressed in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLoc.WRT_ExprIn", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLoc.WRT_ExprIn", "kind": "function", "doc": "<p>WRT_ExprIn(self: spaceteams.SC_Compute_Server.FramedLoc, inFrame: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n\n<p>Resolve the location with respect to a specified frame, performing transport theorem.\n                        Also uses the same frame (coordinate basis) to express the vector.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedRot", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedRot", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.FramedRot.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedRot.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.FramedRot, rot: numpy.ndarray[numpy.float64[3, 3]], frame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.FramedRot.Quat_WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedRot.Quat_WRT", "kind": "function", "doc": "<p>Quat_WRT(self: spaceteams.SC_Compute_Server.FramedRot, inFrame: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[4, 1]]</p>\n\n<p>Express the quaternion corresponding to the time-extrapolated passive rotation transformation matrix\n                        from specified frame to the orientation defined by this FramedRot\n                        (xyzw quaternion, right handed coordinates).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedRot.DCM_WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedRot.DCM_WRT", "kind": "function", "doc": "<p>DCM_WRT(self: spaceteams.SC_Compute_Server.FramedRot, inFrame: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[3, 3]]</p>\n\n<p>Express the time-extrapolated passive rotation transformation matrix from specified frame to the orientation defined by this FramedRot\n                        (DCM, right handed coordinates).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVel", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVel", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVel.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVel.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.FramedLocVel, locVel: spaceteams.SC_Compute_Server.rv_struct, frame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVel.loc_WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVel.loc_WRT", "kind": "function", "doc": "<p>loc_WRT(self: spaceteams.SC_Compute_Server.FramedLocVel, inFrame: spaceteams.SC_Compute_Server.Frame) -> spaceteams.SC_Compute_Server.FramedVector</p>\n\n<p>Resolve the location with respect to a specified frame, performing transport theorem.\n                        Returns a FramedVector so you can do ExprIn to specify coordinate basis the location should be expressed in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVel.vel_WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVel.vel_WRT", "kind": "function", "doc": "<p>vel_WRT(self: spaceteams.SC_Compute_Server.FramedLocVel, inFrame: spaceteams.SC_Compute_Server.Frame) -> spaceteams.SC_Compute_Server.FramedVector</p>\n\n<p>Resolve the velocity with respect to a specified frame, performing transport theorem.\n                        Returns a FramedVector so you can do ExprIn to specify coordinate basis the velocity should be expressed in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVel.WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVel.WRT", "kind": "function", "doc": "<p>WRT(self: spaceteams.SC_Compute_Server.FramedLocVel, inFrame: spaceteams.SC_Compute_Server.Frame) -> spaceteams.SC_Compute_Server.FramedVector</p>\n\n<p>Resolve the velocity with respect to a specified frame, performing transport theorem.\n                        Returns a FramedVector so you can do ExprIn to specify coordinate basis the acceleration should be expressed in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVel.WRT_ExprIn", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVel.WRT_ExprIn", "kind": "function", "doc": "<p>WRT_ExprIn(self: spaceteams.SC_Compute_Server.FramedLocVel, inFrame: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n\n<p>Resolve the velocity with respect to a specified frame, performing transport theorem.\n                        Also uses the same frame (coordinate basis) to express the vector.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVelAcc", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVelAcc", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVelAcc.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVelAcc.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.FramedLocVelAcc, locVelAcc: spaceteams.SC_Compute_Server.rva_struct, frame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVelAcc.loc_WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVelAcc.loc_WRT", "kind": "function", "doc": "<p>loc_WRT(self: spaceteams.SC_Compute_Server.FramedLocVelAcc, inFrame: spaceteams.SC_Compute_Server.Frame) -> spaceteams.SC_Compute_Server.FramedVector</p>\n\n<p>Resolve the location with respect to a specified frame, performing transport theorem.\n                        Returns a FramedVector so you can do ExprIn to specify coordinate basis the location should be expressed in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVelAcc.vel_WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVelAcc.vel_WRT", "kind": "function", "doc": "<p>vel_WRT(self: spaceteams.SC_Compute_Server.FramedLocVelAcc, inFrame: spaceteams.SC_Compute_Server.Frame) -> spaceteams.SC_Compute_Server.FramedVector</p>\n\n<p>Resolve the velocity with respect to a specified frame, performing transport theorem.\n                        Returns a FramedVector so you can do ExprIn to specify coordinate basis the velocity should be expressed in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVelAcc.acc_WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVelAcc.acc_WRT", "kind": "function", "doc": "<p>acc_WRT(self: spaceteams.SC_Compute_Server.FramedLocVelAcc, inFrame: spaceteams.SC_Compute_Server.Frame) -> spaceteams.SC_Compute_Server.FramedVector</p>\n\n<p>Resolve the acceleration with respect to a specified frame, performing transport theorem.\n                        Returns a FramedVector so you can do ExprIn to specify coordinate basis the acceleration should be expressed in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVelAcc.WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVelAcc.WRT", "kind": "function", "doc": "<p>WRT(self: spaceteams.SC_Compute_Server.FramedLocVelAcc, inFrame: spaceteams.SC_Compute_Server.Frame) -> spaceteams.SC_Compute_Server.FramedVector</p>\n\n<p>Resolve the acceleration with respect to a specified frame, performing transport theorem.\n                        Returns a FramedVector so you can do ExprIn to specify coordinate basis the acceleration should be expressed in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedLocVelAcc.WRT_ExprIn", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedLocVelAcc.WRT_ExprIn", "kind": "function", "doc": "<p>WRT_ExprIn(self: spaceteams.SC_Compute_Server.FramedLocVelAcc, inFrame: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n\n<p>Resolve the acceleration with respect to a specified frame, performing transport theorem.\n                        Also uses the same frame (coordinate basis) to express the vector.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedAngVel", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedAngVel", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.FramedAngVel.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedAngVel.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.FramedAngVel, angvel: numpy.ndarray[numpy.float64[3, 1]], frame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.FramedAngVel.WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedAngVel.WRT", "kind": "function", "doc": "<p>WRT(self: spaceteams.SC_Compute_Server.FramedAngVel, inFrame: spaceteams.SC_Compute_Server.Frame) -> spaceteams.SC_Compute_Server.FramedVector</p>\n\n<p>Redefine the angular velocity state with respect to a specified frame. \n                        Redefining the angular velocity as such applies more \n                        than just rotation of the vector quantity to the new coordinate basis.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedAngVel.WRT_ExprIn", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedAngVel.WRT_ExprIn", "kind": "function", "doc": "<p>WRT_ExprIn(self: spaceteams.SC_Compute_Server.FramedAngVel, inFrame: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n\n<p>Redefine the angular velocity state with respect to a specified frame. \n                        Redefining the angular velocity as such applies more \n                        than just rotation of the vector quantity to the new coordinate basis.\n                        Also expresses the vector in the same frame (coordinate basis).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedAngAcc", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedAngAcc", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.FramedAngAcc.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedAngAcc.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.FramedAngAcc, angacc: numpy.ndarray[numpy.float64[3, 1]], frame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.FramedAngAcc.WRT", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedAngAcc.WRT", "kind": "function", "doc": "<p>WRT(self: spaceteams.SC_Compute_Server.FramedAngAcc, inFrame: spaceteams.SC_Compute_Server.Frame) -> spaceteams.SC_Compute_Server.FramedVector</p>\n\n<p>Redefine the angular acceleration state with respect to a specified frame. \n                        Redefining the angular acceleration as such applies more \n                        than just rotation of the vector quantity to the new coordinate basis.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.FramedAngAcc.WRT_ExprIn", "modulename": "spaceteams.SC_Compute_Server", "qualname": "FramedAngAcc.WRT_ExprIn", "kind": "function", "doc": "<p>WRT_ExprIn(self: spaceteams.SC_Compute_Server.FramedAngAcc, inFrame: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n\n<p>Redefine the angular acceleration state with respect to a specified frame. \n                        Redefining the angular acceleration as such applies more \n                        than just rotation of the vector quantity to the new coordinate basis.\n                        Also expresses the vector in the same frame (coordinate basis).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity", "kind": "class", "doc": "<p></p>\n", "bases": "ParamMap"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.Entity) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getName", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getName", "kind": "function", "doc": "<p>getName(self: spaceteams.SC_Compute_Server.Entity) -> str</p>\n\n<p>Returns the name of the Entity</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getId", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getId", "kind": "function", "doc": "<p>getId(self: spaceteams.SC_Compute_Server.Entity) -> ST_UUID::UUID_t</p>\n\n<p>Returns the id of the Entity</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getId_str", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getId_str", "kind": "function", "doc": "<p>getId_str(self: spaceteams.SC_Compute_Server.Entity) -> str</p>\n\n<p>Returns the id of the Entity as string type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getLocation", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getLocation", "kind": "function", "doc": "<p>getLocation(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.FramedLoc</p>\n\n<p>Get time-extrapolated location of this entity (meters, right handed coordinates)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getRotation", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getRotation", "kind": "function", "doc": "<p>getRotation(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.FramedRot</p>\n\n<p>Get the orientation of this entity's body frame (right handed coordinates).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getRV", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getRV", "kind": "function", "doc": "<p>getRV(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.FramedLocVel</p>\n\n<p>Get time-extrapolated location and velocity of this entity (meters, meters/second, right handed coordinates).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getRVA", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getRVA", "kind": "function", "doc": "<p>getRVA(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.FramedLocVelAcc</p>\n\n<p>Get time-extrapolated location, velocity, and acceleration of this entity (meters, meters/second, meters/second^2, right handed coordinates).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getVelocity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getVelocity", "kind": "function", "doc": "<p>getVelocity(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.FramedLocVel</p>\n\n<p>Get the orientation of this entity\u2019s body frame in Quat (right handed coordinates, wxyz)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getAcceleration", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getAcceleration", "kind": "function", "doc": "<p>getAcceleration(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.FramedLocVelAcc</p>\n\n<p>Get time-extrapolated acceleration of this entity (meters/sec ^ 2, right handed coordinates)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getAngAcceleration", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getAngAcceleration", "kind": "function", "doc": "<p>getAngAcceleration(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.FramedAngAcc</p>\n\n<p>Get time-extrapolated angular acceleration of this entity (rad/sec^2, right handed coordinates)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getAngVelocity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getAngVelocity", "kind": "function", "doc": "<p>getAngVelocity(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.FramedAngVel</p>\n\n<p>Get time-extrapolated angular velocity of this entity (rad/sec, right handed coordinates) \n                        The vector direction is the axis of rotation, and the magnitude of the vector is the speed of the\n                         right-handed rotation around that axis</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getMass", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getMass", "kind": "function", "doc": "<p>getMass(self: spaceteams.SC_Compute_Server.Entity) -> float</p>\n\n<p>Get the mass of this entity (kg)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getInertia", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getInertia", "kind": "function", "doc": "<p>getInertia(self: spaceteams.SC_Compute_Server.Entity, inFrame: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[3, 3]]</p>\n\n<p>Get the inertia tensor of this entity (kg*m^2)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getForce", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getForce", "kind": "function", "doc": "<p>getForce(self: spaceteams.SC_Compute_Server.Entity, arg0: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n\n<p>Get the force applied to this entity (N)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getTorque", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getTorque", "kind": "function", "doc": "<p>getTorque(self: spaceteams.SC_Compute_Server.Entity, arg0: spaceteams.SC_Compute_Server.Frame) -> numpy.ndarray[numpy.float64[3, 1]]</p>\n\n<p>Get the torque applied to this entity (N*m)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getImpulses", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getImpulses", "kind": "function", "doc": "<p>getImpulses(<em>args, *</em>kwargs)\nOverloaded function.</p>\n\n<ol>\n<li>getImpulses(self: spaceteams.SC_Compute_Server.Entity, arg0: spaceteams.SC_Compute_Server.Frame) -> list[numpy.ndarray[numpy.float64[3, 1]]]</li>\n</ol>\n\n<p>Get the impulses applied to this entity (N*s)</p>\n\n<ol start=\"2\">\n<li>getImpulses(self: spaceteams.SC_Compute_Server.Entity, inFrame: spaceteams.SC_Compute_Server.Frame) -> list[numpy.ndarray[numpy.float64[3, 1]]]</li>\n</ol>\n\n<p>Get Entity Impulses (Newton-seconds, right handed coordinates). \n                        Interim solution for modular propagators before we have PhysicalEffects. \n                        Consumes the impulses!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setLocation", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setLocation", "kind": "function", "doc": "<p>setLocation(self: spaceteams.SC_Compute_Server.Entity, loc: spaceteams.SC_Compute_Server.FramedLoc) -> None</p>\n\n<p>Set entity location (meters, right handed coordinates)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setLocationD", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setLocationD", "kind": "function", "doc": "<p>setLocationD(self: spaceteams.SC_Compute_Server.Entity, loc: numpy.ndarray[numpy.float64[3, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Set entity location (meters, right handed coordinates)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setVelocity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setVelocity", "kind": "function", "doc": "<p>setVelocity(self: spaceteams.SC_Compute_Server.Entity, vel: spaceteams.SC_Compute_Server.FramedLocVel) -> None</p>\n\n<p>Set the velocity of this entity (meters/sec, right handed coordinates)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setVelocityD", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setVelocityD", "kind": "function", "doc": "<p>setVelocityD(self: spaceteams.SC_Compute_Server.Entity, vel: numpy.ndarray[numpy.float64[3, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Set the velocity of this entity (meters/sec, right handed coordinates)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setAcceleration", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setAcceleration", "kind": "function", "doc": "<p>setAcceleration(self: spaceteams.SC_Compute_Server.Entity, acc: spaceteams.SC_Compute_Server.FramedLocVelAcc) -> None</p>\n\n<p>Get time-extrapolated acceleration of this entity (meters/sec ^ 2, right handed coordinates)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setAccelerationD", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setAccelerationD", "kind": "function", "doc": "<p>setAccelerationD(self: spaceteams.SC_Compute_Server.Entity, acc: numpy.ndarray[numpy.float64[3, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Get time-extrapolated acceleration of this entity (meters/sec ^ 2, right handed coordinates)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setRotation", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setRotation", "kind": "function", "doc": "<p>setRotation(self: spaceteams.SC_Compute_Server.Entity, rot: spaceteams.SC_Compute_Server.FramedRot) -> None</p>\n\n<p>Set entity rotation (FramedRot).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setRotation_Quat", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setRotation_Quat", "kind": "function", "doc": "<p>setRotation_Quat(<em>args, *</em>kwargs)\nOverloaded function.</p>\n\n<ol>\n<li>setRotation_Quat(self: spaceteams.SC_Compute_Server.Entity, rot_quat_xyzw: numpy.ndarray[numpy.float64[4, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</li>\n</ol>\n\n<p>Set entity rotation (passive quaternion, right hand coordinate). \n                        Takes numpy array of (x,y,z,w).</p>\n\n<ol start=\"2\">\n<li>setRotation_Quat(self: spaceteams.SC_Compute_Server.Entity, rot_quat_xyzw: tuple, fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</li>\n</ol>\n\n<p>Set entity rotation (passive quaternion, right hand coordinate).\n                        Takes list of floats (x,y,z,w).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setRotation_DCM", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setRotation_DCM", "kind": "function", "doc": "<p>setRotation_DCM(self: spaceteams.SC_Compute_Server.Entity, rot: numpy.ndarray[numpy.float64[3, 3]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Set entity rotation (passiveDCM, right hand coordinate)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setAngVelocity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setAngVelocity", "kind": "function", "doc": "<p>setAngVelocity(self: spaceteams.SC_Compute_Server.Entity, angvel: spaceteams.SC_Compute_Server.FramedAngVel) -> None</p>\n\n<p>Set time-extrapolated angular velocity of this entity (rad/sec, right handed coordinates) \n                        The vector direction is the axis of rotation, and the magnitude of the vector is the speed of the right-handed \n                        rotation around that axis</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setAngVelocityD", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setAngVelocityD", "kind": "function", "doc": "<p>setAngVelocityD(self: spaceteams.SC_Compute_Server.Entity, angvel: numpy.ndarray[numpy.float64[3, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Set time-extrapolated angular velocity of this entity (rad/sec, right handed coordinates) \n                        The vector direction is the axis of rotation, and the magnitude of the vector is the speed of the right-handed \n                        rotation around that axis</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setForce", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setForce", "kind": "function", "doc": "<p>setForce(self: spaceteams.SC_Compute_Server.Entity, force: numpy.ndarray[numpy.float64[3, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Set Entity Force (Newtons, right handed coordinates).\n                        Interim solution for modular propagators before we have PhysicalEffects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setTorque", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setTorque", "kind": "function", "doc": "<p>setTorque(self: spaceteams.SC_Compute_Server.Entity, torque: numpy.ndarray[numpy.float64[3, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Set Entity Torque (Newton-meters, right handed coordinates).\n                        Interim solution for modular propagators before we have PhysicalEffects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.addImpulse", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.addImpulse", "kind": "function", "doc": "<p>addImpulse(self: spaceteams.SC_Compute_Server.Entity, key: str, impulse: numpy.ndarray[numpy.float64[3, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Add named Entity Impulse (Newton-seconds, right handed coordinates). \n                        Interim solution for modular propagators before we have PhysicalEffects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.addLocationOffset", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.addLocationOffset", "kind": "function", "doc": "<p>addLocationOffset(self: spaceteams.SC_Compute_Server.Entity, offset: numpy.ndarray[numpy.float64[3, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Add Entity Location Offset (meters, right handed coordinates).\n                        Interim solution for modular propagators before we have PhysicalEffects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.addVelocityOffset", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.addVelocityOffset", "kind": "function", "doc": "<p>addVelocityOffset(self: spaceteams.SC_Compute_Server.Entity, offset: numpy.ndarray[numpy.float64[3, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Add Entity Velocity Offset (meters/sec, right handed coordinates).\n                        Interim solution for modular propagators before we have PhysicalEffects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.addAngVelocityOffset", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.addAngVelocityOffset", "kind": "function", "doc": "<p>addAngVelocityOffset(self: spaceteams.SC_Compute_Server.Entity, offset: numpy.ndarray[numpy.float64[3, 1]], fromFrame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Add Entity Angular Velocity Offset (rad/sec, right handed coordinates).\n                        Interim solution for modular propagators before we have PhysicalEffects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getResidentFrame", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getResidentFrame", "kind": "function", "doc": "<p>getResidentFrame(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.Frame</p>\n\n<p>Get the frame in which this entity\u2019s state parameter are defined.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.GetBodyFixedFrame", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.GetBodyFixedFrame", "kind": "function", "doc": "<p>GetBodyFixedFrame(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.Frame</p>\n\n<p>Get the body-fixed frame of this entity.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.GetBodyCenteredFrame", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.GetBodyCenteredFrame", "kind": "function", "doc": "<p>GetBodyCenteredFrame(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.Frame</p>\n\n<p>Get the frame centered on this entity, with axes aligned to the resident (parent) frame of the entity.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.getResidentFrameBody", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.getResidentFrameBody", "kind": "function", "doc": "<p>getResidentFrameBody(self: spaceteams.SC_Compute_Server.Entity) -> Entity_Base</p>\n\n<p>Get the entity whose body-fixed frame is used as the frame in which this Entity's state parameters are defined.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.setResidentFrame", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.setResidentFrame", "kind": "function", "doc": "<p>setResidentFrame(self: spaceteams.SC_Compute_Server.Entity, frame: spaceteams.SC_Compute_Server.Frame) -> None</p>\n\n<p>Set the frame in which this Entity's state parameters are defined, and transform state. parameters to line up with the existing state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.AddStateParamsIfMissing", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.AddStateParamsIfMissing", "kind": "function", "doc": "<p>AddStateParamsIfMissing(self: spaceteams.SC_Compute_Server.Entity) -> None</p>\n\n<p>Adds the Location, Velocity, Rotation, AngVelocity, etc params to this Entity if they don't exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.AddDynamicsParamsIfMissing", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.AddDynamicsParamsIfMissing", "kind": "function", "doc": "<p>AddDynamicsParamsIfMissing(self: spaceteams.SC_Compute_Server.Entity) -> None</p>\n\n<p>pbdoc(Adds the remainder of the dynamics params to this Entity if they don't exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.Entity.GetPropagationType", "modulename": "spaceteams.SC_Compute_Server", "qualname": "Entity.GetPropagationType", "kind": "function", "doc": "<p>GetPropagationType(self: spaceteams.SC_Compute_Server.Entity) -> spaceteams.SC_Compute_Server.PropagationType</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.get_entities", "modulename": "spaceteams.SC_Compute_Server", "qualname": "get_entities", "kind": "function", "doc": "<p>get_entities() -> list[spaceteams.SC_Compute_Server.Entity]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.GetThisSystem", "modulename": "spaceteams.SC_Compute_Server", "qualname": "GetThisSystem", "kind": "function", "doc": "<p>GetThisSystem() -> spaceteams.SC_Compute_Server.SystemConfig</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.get_nametag", "modulename": "spaceteams.SC_Compute_Server", "qualname": "get_nametag", "kind": "function", "doc": "<p>get_nametag() -> str</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.CanTransmit", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CanTransmit", "kind": "function", "doc": "<p>CanTransmit() -> bool</p>\n\n<p>Widely-accessible static functions that access the singleton state of the simulation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.GetSimState", "modulename": "spaceteams.SC_Compute_Server", "qualname": "GetSimState", "kind": "function", "doc": "<p>GetSimState() -> spaceteams.SC_Compute_Server.SimState</p>\n\n<p>get the simulation state</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.RequestSimStateChange", "modulename": "spaceteams.SC_Compute_Server", "qualname": "RequestSimStateChange", "kind": "function", "doc": "<p>RequestSimStateChange(newState: spaceteams.SC_Compute_Server.SimState, retransmit: bool = Whether this request should be retransmitted) -> bool</p>\n\n<p>Widely-accessible static functions that access the singleton state of the simulation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.MandateSimStateChange", "modulename": "spaceteams.SC_Compute_Server", "qualname": "MandateSimStateChange", "kind": "function", "doc": "<p>MandateSimStateChange(newState: spaceteams.SC_Compute_Server.SimState, retransmit: bool = Whether this change should be retransmitted) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.MandateSimStop", "modulename": "spaceteams.SC_Compute_Server", "qualname": "MandateSimStop", "kind": "function", "doc": "<p>MandateSimStop(reason: str, retransmit: bool = Whether this change should be retransmitted) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.GetStopReason", "modulename": "spaceteams.SC_Compute_Server", "qualname": "GetStopReason", "kind": "function", "doc": "<p>GetStopReason() -> str</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.GetWallTime_SimStarted", "modulename": "spaceteams.SC_Compute_Server", "qualname": "GetWallTime_SimStarted", "kind": "function", "doc": "<p>GetWallTime_SimStarted() -> datetime.timedelta</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.GetSimEntity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "GetSimEntity", "kind": "function", "doc": "<p>GetSimEntity() -> spaceteams.SC_Compute_Server.Entity</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.OnScreenLogMessage", "modulename": "spaceteams.SC_Compute_Server", "qualname": "OnScreenLogMessage", "kind": "function", "doc": "<p>OnScreenLogMessage(message: str, category: str, severity: spaceteams.SC_Compute_Server.Severity) -> None</p>\n\n<p>Send message that is shown on all app screens, and stays in a log.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.OnScreenAlert", "modulename": "spaceteams.SC_Compute_Server", "qualname": "OnScreenAlert", "kind": "function", "doc": "<p>OnScreenAlert(message: str, topic: str, severity: spaceteams.SC_Compute_Server.Severity) -> None</p>\n\n<p>Send alert that is shown on all app screens, is deduplicated by topic name, and is erased after a few seconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.PhysicalCameraProperties", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PhysicalCameraProperties", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.PhysicalCameraProperties.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PhysicalCameraProperties.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.PhysicalCameraProperties) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.PhysicalCameraProperties.ISO", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PhysicalCameraProperties.ISO", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.PhysicalCameraProperties) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.PhysicalCameraProperties.fStop", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PhysicalCameraProperties.fStop", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.PhysicalCameraProperties) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.PhysicalCameraProperties.minfStop", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PhysicalCameraProperties.minfStop", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.PhysicalCameraProperties) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.PhysicalCameraProperties.shutterSpeed_Hz", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PhysicalCameraProperties.shutterSpeed_Hz", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.PhysicalCameraProperties) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.PhysicalCameraProperties.numApertureBlades", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PhysicalCameraProperties.numApertureBlades", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.PhysicalCameraProperties) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.PhysicalCameraProperties.chrom_abbr_intensity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PhysicalCameraProperties.chrom_abbr_intensity", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.PhysicalCameraProperties) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.PhysicalCameraProperties.focus_distance_m", "modulename": "spaceteams.SC_Compute_Server", "qualname": "PhysicalCameraProperties.focus_distance_m", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.PhysicalCameraProperties) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.ArtCameraProperties", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ArtCameraProperties", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.ArtCameraProperties.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ArtCameraProperties.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.ArtCameraProperties) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.ArtCameraProperties.chrom_abbr_offset", "modulename": "spaceteams.SC_Compute_Server", "qualname": "ArtCameraProperties.chrom_abbr_offset", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.ArtCameraProperties) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImageProperties", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImageProperties", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImageProperties.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImageProperties.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.CaptureImageProperties) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImageProperties.CaptureID", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImageProperties.CaptureID", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CaptureImageProperties) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImageProperties.ResolutionX", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImageProperties.ResolutionX", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CaptureImageProperties) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImageProperties.ResolutionY", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImageProperties.ResolutionY", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CaptureImageProperties) -> int</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImageProperties.FOV", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImageProperties.FOV", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CaptureImageProperties) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImageProperties.is_physical", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImageProperties.is_physical", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CaptureImageProperties) -> bool</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImageProperties.nonphys_EV", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImageProperties.nonphys_EV", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CaptureImageProperties) -> float</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImageProperties.phys", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImageProperties.phys", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CaptureImageProperties) -> spaceteams.SC_Compute_Server.PhysicalCameraProperties</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImageProperties.art", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImageProperties.art", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CaptureImageProperties) -> spaceteams.SC_Compute_Server.ArtCameraProperties</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CaptureImage", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CaptureImage", "kind": "function", "doc": "<p>CaptureImage(camera_en: spaceteams.SC_Compute_Server.Entity, properties: spaceteams.SC_Compute_Server.CaptureImageProperties) -> int</p>\n\n<p>Capture an image from the given camera entity with the given properties.\n                Use OnImageReceived() with the returned capture_id to react to the image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.CapturedImage", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CapturedImage", "kind": "class", "doc": "<p></p>\n", "bases": "pybind11_builtins.pybind11_object"}, {"fullname": "spaceteams.SC_Compute_Server.CapturedImage.__init__", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CapturedImage.__init__", "kind": "function", "doc": "<p>__init__(self: spaceteams.SC_Compute_Server.CapturedImage) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "spaceteams.SC_Compute_Server.CapturedImage.properties", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CapturedImage.properties", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CapturedImage) -> spaceteams.SC_Compute_Server.CaptureImageProperties</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CapturedImage.PixelsR", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CapturedImage.PixelsR", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CapturedImage) -> list[int]</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CapturedImage.PixelsG", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CapturedImage.PixelsG", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CapturedImage) -> list[int]</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CapturedImage.PixelsB", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CapturedImage.PixelsB", "kind": "variable", "doc": "<p>(self: spaceteams.SC_Compute_Server.CapturedImage) -> list[int]</p>\n"}, {"fullname": "spaceteams.SC_Compute_Server.CapturedImage.get_timestamp", "modulename": "spaceteams.SC_Compute_Server", "qualname": "CapturedImage.get_timestamp", "kind": "function", "doc": "<p>get_timestamp(self: spaceteams.SC_Compute_Server.CapturedImage) -> spaceteams.SC_Compute_Server.timestamp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.OnImageReceived", "modulename": "spaceteams.SC_Compute_Server", "qualname": "OnImageReceived", "kind": "function", "doc": "<p>OnImageReceived(capture_id: int, reaction: Callable[[spaceteams.SC_Compute_Server.CapturedImage], None]) -> None</p>\n\n<p>React to an image received with the given capture_id. Reaction must be a function that takes a CapturedImage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_DeleteEntity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_DeleteEntity", "kind": "function", "doc": "<p>SimGlobals_DeleteEntity(en: spaceteams.SC_Compute_Server.Entity, retransmit: bool = Whether this change should be retransmitted) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_AddEntity", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_AddEntity", "kind": "function", "doc": "<p>SimGlobals_AddEntity(e_config: spaceteams.SC_Compute_Server.EntityConfig) -> spaceteams.SC_Compute_Server.Entity</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_AddEntityFromTemplate", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_AddEntityFromTemplate", "kind": "function", "doc": "<p>SimGlobals_AddEntityFromTemplate(template_name: str, entity_name: str, system_nametags: list[str], add_param_operations: Callable[[spaceteams.SC_Compute_Server.ParamMap], None]) -> SC_EntityRef</p>\n\n<p>Adds a new entity using the entity config file at template_path as a starting point.\n           All parameters added to the GenParamMap in the add_param_operations lambda will be used to either overwrite the\n           original parameter value (from the entity template) or add a new parameter. Core/ template_path is relative to the\n           Platform root directory (one above the Compute_Server or SharedData directories).\n           NOTE: Only use AddParam or AddNestedParam functions in the lambda; the template's parameters are not already\n           in the given GenParamMap.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_GetGlobalFrame", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_GetGlobalFrame", "kind": "function", "doc": "<p>SimGlobals_GetGlobalFrame() -> spaceteams.SC_Compute_Server.BaseFrame_Impl</p>\n\n<p>Deprecated; use GetBaseFrame instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_GetBaseFrame", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_GetBaseFrame", "kind": "function", "doc": "<p>SimGlobals_GetBaseFrame() -> spaceteams.SC_Compute_Server.BaseFrame_Impl</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_DispatchEvent", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_DispatchEvent", "kind": "function", "doc": "<p>SimGlobals_DispatchEvent(eventName: str, payload: spaceteams.SC_Compute_Server.ParamMap) -> None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.SimGlobals_AddEventListener", "modulename": "spaceteams.SC_Compute_Server", "qualname": "SimGlobals_AddEventListener", "kind": "function", "doc": "<p>SimGlobals_AddEventListener(eventName: str, delegateFn: Callable[[spaceteams.SC_Compute_Server.ParamMap, spaceteams.SC_Compute_Server.timestamp], None]) -> None</p>\n\n<p>Widely-accessible static functions that access the singleton state of the simulation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.logger_info", "modulename": "spaceteams.SC_Compute_Server", "qualname": "logger_info", "kind": "function", "doc": "<p>logger_info(msg: str) -> None</p>\n\n<p>Output logger information</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.logger_warn", "modulename": "spaceteams.SC_Compute_Server", "qualname": "logger_warn", "kind": "function", "doc": "<p>logger_warn(msg: str) -> None</p>\n\n<p>Output logger warnings</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.logger_error", "modulename": "spaceteams.SC_Compute_Server", "qualname": "logger_error", "kind": "function", "doc": "<p>logger_error(msg: str) -> None</p>\n\n<p>Output logger error</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spaceteams.SC_Compute_Server.logger_fatal", "modulename": "spaceteams.SC_Compute_Server", "qualname": "logger_fatal", "kind": "function", "doc": "<p>logger_fatal(msg: str) -> None</p>\n\n<p>Output logger fatal error</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();